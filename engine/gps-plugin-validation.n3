# -----------------------------------------
# Path validation - Hong Sun and Jos De Roo
# -----------------------------------------


#Each state transition that is conventionally described in the generated GPS path is now separated into two events: (?Action gps:start ?dueTime ?graph) and (?Action gps:end ?dueTime ?graph). These two events will be processed by the validation rules separately.




PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX list: <http://www.w3.org/2000/10/swap/list#>
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>
PREFIX prolog: <http://eulersharp.sourceforge.net/2003/03swap/prolog#>
PREFIX gps: <http://josd.github.io/fluid/gps/gps-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>


##The method to retrieve current time, however, during the test, we are going to simulate events in future, so 'gps:CurrentTime gps:value ?T .' will be explicitly stated in the data. 
##{gps:CurrentTime gps:value ?T .} <= {(?T) prolog:get_time true. }.


# find paths in the state space from initial state to goal state within limits
{?SCOPE gps:findpath (?Goal ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort))} <= {
	?patient gps:aggregatedPath ?temporalPath.
	?SCOPE gps:path_validation (?Goal () ?temporalPath 0.0 0.0 1.0 1.0  ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ()).
}.

{?SCOPE gps:path_validation (?Goal ?Path ?temporalPath ?Duration ?Cost ?Belief ?Comfort  ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?To_list)} <= {
	?SCOPE e:call ?Goal.
	() prolog:cut true.
}.



############################################################################
#Transition already executed
############################################################################

#Start event
{?SCOPE gps:path_validation (?Goal ?Path_s ?temporalPath ?Duration_s ?Cost_s ?Belief_s ?Comfort_s  ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?To_list)} <= {

	?temporalPath list:first ((?Action ?start ?end) gps:start ?dueTime ?graph).
	?temporalPath gps:head_state gps:Executed.
	?temporalPath list:rest ?path_r.

	(?Path_s (((?Action ?start ?end) gps:start ?dueTime ?graph))) list:append ?Path_t.
	
	?SCOPE gps:path_validation (?Goal ?Path_t ?path_r ?Duration_s ?Cost_s ?Belief_s ?Comfort_s ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?To_list)
}.	

#End event
{?SCOPE gps:path_validation (?Goal ?Path_s ?temporalPath ?Duration_s ?Cost_s ?Belief_s ?Comfort_s  ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?To_list)} <= {
	?temporalPath list:first ((?Action ?start ?end) gps:end ?dueTime ?graph).
	?temporalPath gps:head_state gps:Executed.
	?temporalPath list:rest ?path_r.
	
	(?Path_s (((?Action ?start ?end) gps:end ?dueTime ?graph))) list:append ?Path_t.
	
	?SCOPE gps:path_validation (?Goal ?Path_t ?path_r ?Duration_s ?Cost_s ?Belief_s ?Comfort_s ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?To_list)
}.	


############################################################################
#Transition to be executed
############################################################################

#Start
{?SCOPE gps:path_validation (?Goal ?Path_s ?temporalPath ?Duration_s ?Cost_s ?Belief_s ?Comfort_s  ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?To_list)} <= {
	?temporalPath list:first ((?Action ?start ?end) gps:start ?dueTime ?graph).
	?temporalPath gps:head_state gps:To_Be_Executed.

	
	?temporalPath list:rest ?path_r.

	{?ST gps:description (?From ?Transition ?To ?Action ?Duration_n ?Cost_n ?Belief_n ?Comfort_n)} <= ?Where.
	
	?SCOPE e:call ?From.
	?SCOPE e:call ?Where.
	(?Path_s (((?Action ?start ?end) gps:start ?dueTime ?graph))) list:append ?Path_t.
	(?Duration_s ?Duration_n) math:sum ?Duration_t.
	(?Cost_s ?Cost_n) math:sum ?Cost_t.
	(?Belief_s ?Belief_n) math:product ?Belief_t.
	(?Comfort_s ?Comfort_n) math:product ?Comfort_t.
	?From e:becomes ?Transition.
	
	(?To_list (((?Action ?start ?end) ?To))) list:append ?new_To_list.
	{?SCOPE gps:path_validation (?Goal ?Path_t ?path_r ?Duration_t ?Cost_t ?Belief_t ?Comfort_t  ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?new_To_list)} e:finalize {
	?Transition e:becomes ?From.
  	}.
}.

#End
{?SCOPE gps:path_validation (?Goal ?Path_s ?temporalPath ?Duration_s ?Cost_s ?Belief_s ?Comfort_s  ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?To_list)} <= {
	?temporalPath list:first ((?Action ?start ?end) gps:end ?dueTime ?graph).
	?temporalPath gps:head_state gps:To_Be_Executed.

#	?patient gps:aggregatedPath ?complete_Path.
#	(((?Action ?start ?end) gps:end ?dueTime ?graph) ?complete_Path ?current_time)  gps:ongoing false.

	?temporalPath list:rest ?path_r.

	{?ST gps:description (?From ?Transition ?To ?Action ?Duration_n ?Cost_n ?Belief_n ?Comfort_n)} <= ?Where.

	?SCOPE e:call ?Transition.
	
	?To_list list:member ((?Action ?start ?end) ?Defined_To).

	(?Path_s ((?Action gps:end ?dueTime ?graph))) list:append ?Path_t.
	(?Duration_s ?Duration_n) math:sum ?Duration_t.
	(?Cost_s ?Cost_n) math:sum ?Cost_t.
	(?Belief_s ?Belief_n) math:product ?Belief_t.
	(?Comfort_s ?Comfort_n) math:product ?Comfort_t.
	?Transition e:becomes ?Defined_To.
	
	{?SCOPE gps:path_validation (?Goal ?Path_t ?path_r ?Duration_t ?Cost_t ?Belief_t ?Comfort_t  ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?To_list)} e:finalize {
	?Defined_To e:becomes ?Transition.
  	}.
}.

############################################################################
#Transition is ongoing
############################################################################

#Start
{?SCOPE gps:path_validation (?Goal ?Path_s ?temporalPath ?Duration_s ?Cost_s ?Belief_s ?Comfort_s  ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?To_list)} <= {
	?temporalPath list:first ((?Action ?start ?end) gps:start ?dueTime ?graph).
	?temporalPath gps:head_state gps:Being_Executed.

	?temporalPath list:rest ?path_r.

	{?ST gps:description (?From ?Transition ?To ?Action ?Duration_n ?Cost_n ?Belief_n ?Comfort_n)} <= ?Where.
	?SCOPE e:call ?From.
#	?SCOPE e:call ?Where.
	
	(?Path_s ((?Action gps:start ?dueTime ?graph))) list:append ?Path_t.
	(?Duration_s ?Duration_n) math:sum ?Duration_t.
	(?Cost_s ?Cost_n) math:sum ?Cost_t.
	(?Belief_s ?Belief_n) math:product ?Belief_t.
	(?Comfort_s ?Comfort_n) math:product ?Comfort_t.
	?From e:becomes ?Transition.

	
	{?SCOPE gps:path_validation (?Goal ?Path_t ?path_r ?Duration_t ?Cost_t ?Belief_t ?Comfort_t  ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?To_list)} e:finalize {
	?Transition e:becomes ?From.
	}.
}.


#End
{?SCOPE gps:path_validation (?Goal ?Path_s ?temporalPath ?Duration_s ?Cost_s ?Belief_s ?Comfort_s  ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?To_list)} <= {
	?temporalPath list:first ((?Action ?start ?end) gps:end ?dueTime ?graph).
	?temporalPath gps:head_state gps:Being_Executed.
	
	?temporalPath list:rest ?path_r.

	{?ST gps:description (?From ?Transition ?To ?Action ?Duration_n ?Cost_n ?Belief_n ?Comfort_n)} <= ?Where.
	?SCOPE e:call ?Transition.

	(?Path_s ((?Action gps:end ?dueTime ?graph))) list:append ?Path_t.
	(?Duration_s ?Duration_n) math:sum ?Duration_t.
	(?Cost_s ?Cost_n) math:sum ?Cost_t.
	(?Belief_s ?Belief_n) math:product ?Belief_t.
	(?Comfort_s ?Comfort_n) math:product ?Comfort_t.
	?Transition e:becomes ?graph.
	
	{?SCOPE gps:path_validation (?Goal ?Path_t ?path_r ?Duration_t ?Cost_t ?Belief_t ?Comfort_t  ?Path ?Duration ?Cost ?Belief ?Comfort (?MaxDuration ?MaxCost ?MinBelief ?MinComfort) ?To_list)} e:finalize {
	?graph e:becomes ?Transition.
	}.
}.





{?path gps:head_state gps:Executed.} <={
	?path list:first ((?Action ?start ?end) ?state ?dueTime ?graph).
	gps:CurrentTime gps:value ?T .
	?T math:rounded ?current_time.
	?current_time math:notLessThan ?end.
}.

{?path gps:head_state gps:Being_Executed.} <={
	?path list:first ((?Action ?start ?end) ?state ?dueTime ?graph).
	gps:CurrentTime gps:value ?T .
	?T math:rounded ?current_time.
	?current_time math:greaterThan ?start.
	?current_time math:lessThan ?end.
}.


{?path gps:head_state gps:To_Be_Executed.} <={
	?path list:first ((?Action ?start ?end) ?state ?dueTime ?graph).
	gps:CurrentTime gps:value ?T .
	?T math:rounded ?current_time.
	?current_time math:notGreaterThan ?start.
}.